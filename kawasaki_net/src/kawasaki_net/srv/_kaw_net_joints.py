"""autogenerated by genpy from kawasaki_net/kaw_net_jointsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class kaw_net_jointsRequest(genpy.Message):
  _md5sum = "cf42e449cd90d9eb50f10fea202b7814"
  _type = "kawasaki_net/kaw_net_jointsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 J1
float32 J2
float32 J3
float32 J4
float32 J5
float32 J6

"""
  __slots__ = ['J1','J2','J3','J4','J5','J6']
  _slot_types = ['float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       J1,J2,J3,J4,J5,J6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kaw_net_jointsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.J1 is None:
        self.J1 = 0.
      if self.J2 is None:
        self.J2 = 0.
      if self.J3 is None:
        self.J3 = 0.
      if self.J4 is None:
        self.J4 = 0.
      if self.J5 is None:
        self.J5 = 0.
      if self.J6 is None:
        self.J6 = 0.
    else:
      self.J1 = 0.
      self.J2 = 0.
      self.J3 = 0.
      self.J4 = 0.
      self.J5 = 0.
      self.J6 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6f.pack(_x.J1, _x.J2, _x.J3, _x.J4, _x.J5, _x.J6))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.J1, _x.J2, _x.J3, _x.J4, _x.J5, _x.J6,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6f.pack(_x.J1, _x.J2, _x.J3, _x.J4, _x.J5, _x.J6))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.J1, _x.J2, _x.J3, _x.J4, _x.J5, _x.J6,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6f = struct.Struct("<6f")
"""autogenerated by genpy from kawasaki_net/kaw_net_jointsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class kaw_net_jointsResponse(genpy.Message):
  _md5sum = "b3e7d1c3a90b7a5cc4ccd286ac981f72"
  _type = "kawasaki_net/kaw_net_jointsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 Result

"""
  __slots__ = ['Result']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kaw_net_jointsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Result is None:
        self.Result = 0
    else:
      self.Result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.Result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.Result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class kaw_net_joints(object):
  _type          = 'kawasaki_net/kaw_net_joints'
  _md5sum = 'a7582ded0a5f3d849849dc4b47ea5e7b'
  _request_class  = kaw_net_jointsRequest
  _response_class = kaw_net_jointsResponse
