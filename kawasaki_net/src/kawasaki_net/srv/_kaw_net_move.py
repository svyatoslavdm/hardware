"""autogenerated by genpy from kawasaki_net/kaw_net_moveRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class kaw_net_moveRequest(genpy.Message):
  _md5sum = "9f80485e807a289874d7a62e4d5ddad1"
  _type = "kawasaki_net/kaw_net_moveRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] data
int8 motiontype
float32 speed
float32 angspeed
bool time

"""
  __slots__ = ['data','motiontype','speed','angspeed','time']
  _slot_types = ['float32[]','int8','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,motiontype,speed,angspeed,time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kaw_net_moveRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = []
      if self.motiontype is None:
        self.motiontype = 0
      if self.speed is None:
        self.speed = 0.
      if self.angspeed is None:
        self.angspeed = 0.
      if self.time is None:
        self.time = False
    else:
      self.data = []
      self.motiontype = 0
      self.speed = 0.
      self.angspeed = 0.
      self.time = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.data))
      _x = self
      buff.write(_struct_b2fB.pack(_x.motiontype, _x.speed, _x.angspeed, _x.time))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 10
      (_x.motiontype, _x.speed, _x.angspeed, _x.time,) = _struct_b2fB.unpack(str[start:end])
      self.time = bool(self.time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.data.tostring())
      _x = self
      buff.write(_struct_b2fB.pack(_x.motiontype, _x.speed, _x.angspeed, _x.time))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 10
      (_x.motiontype, _x.speed, _x.angspeed, _x.time,) = _struct_b2fB.unpack(str[start:end])
      self.time = bool(self.time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b2fB = struct.Struct("<b2fB")
"""autogenerated by genpy from kawasaki_net/kaw_net_moveResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class kaw_net_moveResponse(genpy.Message):
  _md5sum = "b3e7d1c3a90b7a5cc4ccd286ac981f72"
  _type = "kawasaki_net/kaw_net_moveResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 Result

"""
  __slots__ = ['Result']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kaw_net_moveResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Result is None:
        self.Result = 0
    else:
      self.Result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.Result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.Result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class kaw_net_move(object):
  _type          = 'kawasaki_net/kaw_net_move'
  _md5sum = '6b7537f0b2c91ee3816a2812fac586a7'
  _request_class  = kaw_net_moveRequest
  _response_class = kaw_net_moveResponse
